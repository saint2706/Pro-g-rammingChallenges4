# Consolidated dependencies for all Practical subprojects
# Pin minor versions for stability; allow patch updates. Adjust as needed per tool.

# Core scientific / numeric
numpy>=1.26,<2.0
scipy>=1.11,<1.13            # Signal processing (WAV Equalizer, future DSP demos)
pandas>=2.2,<2.3            # Used by IP Tracking visualization
opencv-python>=4.10,<5.0    # Seam carving (energy calculation)
matplotlib>=3.9,<3.10       # Vector product, rotating cube visualization
pygame>=2.6,<2.7            # Old School demo multi-effect timeline
imageio>=2.34,<2.35         # GIF capture/export for retro demo
sounddevice>=0.4,<0.5       # Real-time audio playback (WAV Equalizer)
plotly>=5.22,<5.23          # Interactive geo plots for IP tracking

# Web / networking
Flask>=3.0,<3.1             # Imageboard web app
requests>=2.32,<2.33        # IP tracking API calls, WMS viewer map requests
pyproj>=3.6,<3.7            # Coordinate transforms for WMS viewer

# Data processing / progress
PyYAML>=6.0.2,<6.1          # Configuration parsing for WMS viewer
tqdm>=4.66,<4.67            # Optional progress bars (IP tracking) â€“ optional but recommended

# Imaging
Pillow>=10.4,<10.5          # Image handling (imageboard, ASCII converter, seam carving GUI thumbnails)

# PDF handling (PDF Tagger)
pypdf>=4.3,<4.4             # Preferred modern PDF library
# PyPDF3  (legacy fallback) not listed intentionally; install manually only if needed

python-xlib>=0.33,<0.34        # X11 window manager bindings (PracticalWM)
# CLI polish / color (some scripts may benefit if extended)
colorama>=0.4.6,<0.5        # Windows-safe ANSI colors (optional; used implicitly / future use)

# Input automation
pynput>=1.7,<1.8             # Cross-platform keyboard/mouse control
pyautogui>=0.9,<0.10        # High-level key typing helpers

# MIDI tooling
mido>=1.3,<1.4              # MIDI parsing + editing utilities
python-rtmidi>=1.5,<1.6     # RtMidi backend for real-time playback

# NOTE:
# - Some desktop GUI tools rely only on the Python standard library (tkinter, threading, etc.).
# - If you want a lighter install, you can create per-project requirement subsets.
# - For production deployment of the imageboard, consider freezing exact versions (pip-tools / uv lock).
